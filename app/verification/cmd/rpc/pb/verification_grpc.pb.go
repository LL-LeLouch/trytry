// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: verification.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VerificationClient is the client API for Verification service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VerificationClient interface {
	VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*VerifyEmailResp, error)
	VerifyImage(ctx context.Context, in *VerifyImageReq, opts ...grpc.CallOption) (*VerifyImageResp, error)
}

type verificationClient struct {
	cc grpc.ClientConnInterface
}

func NewVerificationClient(cc grpc.ClientConnInterface) VerificationClient {
	return &verificationClient{cc}
}

func (c *verificationClient) VerifyEmail(ctx context.Context, in *VerifyEmailReq, opts ...grpc.CallOption) (*VerifyEmailResp, error) {
	out := new(VerifyEmailResp)
	err := c.cc.Invoke(ctx, "/pb.verification/verifyEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *verificationClient) VerifyImage(ctx context.Context, in *VerifyImageReq, opts ...grpc.CallOption) (*VerifyImageResp, error) {
	out := new(VerifyImageResp)
	err := c.cc.Invoke(ctx, "/pb.verification/verifyImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// VerificationServer is the server API for Verification service.
// All implementations must embed UnimplementedVerificationServer
// for forward compatibility
type VerificationServer interface {
	VerifyEmail(context.Context, *VerifyEmailReq) (*VerifyEmailResp, error)
	VerifyImage(context.Context, *VerifyImageReq) (*VerifyImageResp, error)
	mustEmbedUnimplementedVerificationServer()
}

// UnimplementedVerificationServer must be embedded to have forward compatible implementations.
type UnimplementedVerificationServer struct {
}

func (UnimplementedVerificationServer) VerifyEmail(context.Context, *VerifyEmailReq) (*VerifyEmailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyEmail not implemented")
}
func (UnimplementedVerificationServer) VerifyImage(context.Context, *VerifyImageReq) (*VerifyImageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyImage not implemented")
}
func (UnimplementedVerificationServer) mustEmbedUnimplementedVerificationServer() {}

// UnsafeVerificationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VerificationServer will
// result in compilation errors.
type UnsafeVerificationServer interface {
	mustEmbedUnimplementedVerificationServer()
}

func RegisterVerificationServer(s grpc.ServiceRegistrar, srv VerificationServer) {
	s.RegisterService(&Verification_ServiceDesc, srv)
}

func _Verification_VerifyEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServer).VerifyEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.verification/verifyEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServer).VerifyEmail(ctx, req.(*VerifyEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Verification_VerifyImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyImageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VerificationServer).VerifyImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.verification/verifyImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VerificationServer).VerifyImage(ctx, req.(*VerifyImageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Verification_ServiceDesc is the grpc.ServiceDesc for Verification service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Verification_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.verification",
	HandlerType: (*VerificationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "verifyEmail",
			Handler:    _Verification_VerifyEmail_Handler,
		},
		{
			MethodName: "verifyImage",
			Handler:    _Verification_VerifyImage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "verification.proto",
}
